!(function e(t, n, r) {
    function s(o, u) {
        if (!n[o]) {
            if (!t[o]) {
                var a = "function" == typeof require && require;
                if (!u && a) return a(o, !0);
                if (i) return i(o, !0);
                var f = new Error("Cannot find module '" + o + "'");
                throw ((f.code = "MODULE_NOT_FOUND"), f);
            }
            var l = (n[o] = { exports: {} });
            t[o][0].call(
                l.exports,
                function (e) {
                    var n = t[o][1][e];
                    return s(n ? n : e);
                },
                l,
                l.exports,
                e,
                t,
                n,
                r
            );
        }
        return n[o].exports;
    }
    for (var i = "function" == typeof require && require, o = 0; o < r.length; o++) s(r[o]);
    return s;
})(
    {
        1: [
            function (require, module, exports) {
                function noop() {}
                function isHost(obj) {
                    var str = {}.toString.call(obj);
                    switch (str) {
                        case "[object File]":
                        case "[object Blob]":
                        case "[object FormData]":
                            return !0;
                        default:
                            return !1;
                    }
                }
                function isObject(obj) {
                    return obj === Object(obj);
                }
                function serialize(obj) {
                    if (!isObject(obj)) return obj;
                    var pairs = [];
                    for (var key in obj) null != obj[key] && pairs.push(encodeURIComponent(key) + "=" + encodeURIComponent(obj[key]));
                    return pairs.join("&");
                }
                function parseString(str) {
                    for (var parts, pair, obj = {}, pairs = str.split("&"), i = 0, len = pairs.length; i < len; ++i) (pair = pairs[i]), (parts = pair.split("=")), (obj[decodeURIComponent(parts[0])] = decodeURIComponent(parts[1]));
                    return obj;
                }
                function parseHeader(str) {
                    var index,
                        line,
                        field,
                        val,
                        lines = str.split(/\r?\n/),
                        fields = {};
                    lines.pop();
                    for (var i = 0, len = lines.length; i < len; ++i) (line = lines[i]), (index = line.indexOf(":")), (field = line.slice(0, index).toLowerCase()), (val = trim(line.slice(index + 1))), (fields[field] = val);
                    return fields;
                }
                function type(str) {
                    return str.split(/ *; */).shift();
                }
                function params(str) {
                    return reduce(
                        str.split(/ *; */),
                        function (obj, str) {
                            var parts = str.split(/ *= */),
                                key = parts.shift(),
                                val = parts.shift();
                            return key && val && (obj[key] = val), obj;
                        },
                        {}
                    );
                }
                function Response(req, options) {
                    (options = options || {}),
                        (this.req = req),
                        (this.xhr = this.req.xhr),
                        (this.text = ("HEAD" != this.req.method && ("" === this.xhr.responseType || "text" === this.xhr.responseType)) || "undefined" == typeof this.xhr.responseType ? this.xhr.responseText : null),
                        (this.statusText = this.req.xhr.statusText),
                        this.setStatusProperties(this.xhr.status),
                        (this.header = this.headers = parseHeader(this.xhr.getAllResponseHeaders())),
                        (this.header["content-type"] = this.xhr.getResponseHeader("content-type")),
                        this.setHeaderProperties(this.header),
                        (this.body = "HEAD" != this.req.method ? this.parseBody(this.text ? this.text : this.xhr.response) : null);
                }
                function Request(method, url) {
                    var self = this;
                    Emitter.call(this),
                        (this._query = this._query || []),
                        (this.method = method),
                        (this.url = url),
                        (this.header = {}),
                        (this._header = {}),
                        this.on("end", function () {
                            var err = null,
                                res = null;
                            try {
                                res = new Response(self);
                            } catch (e) {
                                return (err = new Error("Parser is unable to parse the response")), (err.parse = !0), (err.original = e), self.callback(err);
                            }
                            if ((self.emit("response", res), err)) return self.callback(err, res);
                            if (res.status >= 200 && res.status < 300) return self.callback(err, res);
                            var new_err = new Error(res.statusText || "Unsuccessful HTTP response");
                            (new_err.original = err), (new_err.response = res), (new_err.status = res.status), self.callback(err || new_err, res);
                        });
                }
                function request(method, url) {
                    return "function" == typeof url ? new Request("GET", method).end(url) : 1 == arguments.length ? new Request("GET", method) : new Request(method, url);
                }
                var Emitter = require("emitter"),
                    reduce = require("reduce"),
                    root = "undefined" == typeof window ? this || self : window;
                request.getXHR = function () {
                    if (!(!root.XMLHttpRequest || (root.location && "file:" == root.location.protocol && root.ActiveXObject))) return new XMLHttpRequest();
                    try {
                        return new ActiveXObject("Microsoft.XMLHTTP");
                    } catch (e) {}
                    try {
                        return new ActiveXObject("Msxml2.XMLHTTP.6.0");
                    } catch (e) {}
                    try {
                        return new ActiveXObject("Msxml2.XMLHTTP.3.0");
                    } catch (e) {}
                    try {
                        return new ActiveXObject("Msxml2.XMLHTTP");
                    } catch (e) {}
                    return !1;
                };
                var trim = "".trim
                    ? function (s) {
                          return s.trim();
                      }
                    : function (s) {
                          return s.replace(/(^\s*|\s*$)/g, "");
                      };
                (request.serializeObject = serialize),
                    (request.parseString = parseString),
                    (request.types = {
                        html: "text/html",
                        json: "application/json",
                        xml: "application/xml",
                        urlencoded: "application/x-www-form-urlencoded",
                        form: "application/x-www-form-urlencoded",
                        "form-data": "application/x-www-form-urlencoded",
                    }),
                    (request.serialize = { "application/x-www-form-urlencoded": serialize, "application/json": JSON.stringify }),
                    (request.parse = { "application/x-www-form-urlencoded": parseString, "application/json": JSON.parse }),
                    (Response.prototype.get = function (field) {
                        return this.header[field.toLowerCase()];
                    }),
                    (Response.prototype.setHeaderProperties = function (header) {
                        var ct = this.header["content-type"] || "";
                        this.type = type(ct);
                        var obj = params(ct);
                        for (var key in obj) this[key] = obj[key];
                    }),
                    (Response.prototype.parseBody = function (str) {
                        var parse = request.parse[this.type];
                        return parse && str && (str.length || str instanceof Object) ? parse(str) : null;
                    }),
                    (Response.prototype.setStatusProperties = function (status) {
                        1223 === status && (status = 204);
                        var type = (status / 100) | 0;
                        (this.status = status),
                            (this.statusType = type),
                            (this.info = 1 == type),
                            (this.ok = 2 == type),
                            (this.clientError = 4 == type),
                            (this.serverError = 5 == type),
                            (this.error = (4 == type || 5 == type) && this.toError()),
                            (this.accepted = 202 == status),
                            (this.noContent = 204 == status),
                            (this.badRequest = 400 == status),
                            (this.unauthorized = 401 == status),
                            (this.notAcceptable = 406 == status),
                            (this.notFound = 404 == status),
                            (this.forbidden = 403 == status);
                    }),
                    (Response.prototype.toError = function () {
                        var req = this.req,
                            method = req.method,
                            url = req.url,
                            msg = "cannot " + method + " " + url + " (" + this.status + ")",
                            err = new Error(msg);
                        return (err.status = this.status), (err.method = method), (err.url = url), err;
                    }),
                    (request.Response = Response),
                    Emitter(Request.prototype),
                    (Request.prototype.use = function (fn) {
                        return fn(this), this;
                    }),
                    (Request.prototype.timeout = function (ms) {
                        return (this._timeout = ms), this;
                    }),
                    (Request.prototype.clearTimeout = function () {
                        return (this._timeout = 0), clearTimeout(this._timer), this;
                    }),
                    (Request.prototype.abort = function () {
                        if (!this.aborted) return (this.aborted = !0), this.xhr.abort(), this.clearTimeout(), this.emit("abort"), this;
                    }),
                    (Request.prototype.set = function (field, val) {
                        if (isObject(field)) {
                            for (var key in field) this.set(key, field[key]);
                            return this;
                        }
                        return (this._header[field.toLowerCase()] = val), (this.header[field] = val), this;
                    }),
                    (Request.prototype.unset = function (field) {
                        return delete this._header[field.toLowerCase()], delete this.header[field], this;
                    }),
                    (Request.prototype.getHeader = function (field) {
                        return this._header[field.toLowerCase()];
                    }),
                    (Request.prototype.type = function (type) {
                        return this.set("Content-Type", request.types[type] || type), this;
                    }),
                    (Request.prototype.accept = function (type) {
                        return this.set("Accept", request.types[type] || type), this;
                    }),
                    (Request.prototype.auth = function (user, pass) {
                        var str = btoa(user + ":" + pass);
                        return this.set("Authorization", "Basic " + str), this;
                    }),
                    (Request.prototype.query = function (val) {
                        return "string" != typeof val && (val = serialize(val)), val && this._query.push(val), this;
                    }),
                    (Request.prototype.field = function (name, val) {
                        return this._formData || (this._formData = new root.FormData()), this._formData.append(name, val), this;
                    }),
                    (Request.prototype.attach = function (field, file, filename) {
                        return this._formData || (this._formData = new root.FormData()), this._formData.append(field, file, filename), this;
                    }),
                    (Request.prototype.send = function (data) {
                        var obj = isObject(data),
                            type = this.getHeader("Content-Type");
                        if (obj && isObject(this._data)) for (var key in data) this._data[key] = data[key];
                        else
                            "string" == typeof data
                                ? (type || this.type("form"),
                                  (type = this.getHeader("Content-Type")),
                                  "application/x-www-form-urlencoded" == type ? (this._data = this._data ? this._data + "&" + data : data) : (this._data = (this._data || "") + data))
                                : (this._data = data);
                        return !obj || isHost(data) ? this : (type || this.type("json"), this);
                    }),
                    (Request.prototype.callback = function (err, res) {
                        var fn = this._callback;
                        this.clearTimeout(), fn(err, res);
                    }),
                    (Request.prototype.crossDomainError = function () {
                        var err = new Error("Origin is not allowed by Access-Control-Allow-Origin");
                        (err.crossDomain = !0), this.callback(err);
                    }),
                    (Request.prototype.timeoutError = function () {
                        var timeout = this._timeout,
                            err = new Error("timeout of " + timeout + "ms exceeded");
                        (err.timeout = timeout), this.callback(err);
                    }),
                    (Request.prototype.withCredentials = function () {
                        return (this._withCredentials = !0), this;
                    }),
                    (Request.prototype.end = function (fn) {
                        var self = this,
                            xhr = (this.xhr = request.getXHR()),
                            query = this._query.join("&"),
                            timeout = this._timeout,
                            data = this._formData || this._data;
                        (this._callback = fn || noop),
                            (xhr.onreadystatechange = function () {
                                if (4 == xhr.readyState) {
                                    var status;
                                    try {
                                        status = xhr.status;
                                    } catch (e) {
                                        status = 0;
                                    }
                                    if (0 == status) {
                                        if (self.timedout) return self.timeoutError();
                                        if (self.aborted) return;
                                        return self.crossDomainError();
                                    }
                                    self.emit("end");
                                }
                            });
                        var handleProgress = function (e) {
                            e.total > 0 && (e.percent = (e.loaded / e.total) * 100), self.emit("progress", e);
                        };
                        this.hasListeners("progress") && (xhr.onprogress = handleProgress);
                        try {
                            xhr.upload && this.hasListeners("progress") && (xhr.upload.onprogress = handleProgress);
                        } catch (e) {}
                        if (
                            (timeout &&
                                !this._timer &&
                                (this._timer = setTimeout(function () {
                                    (self.timedout = !0), self.abort();
                                }, timeout)),
                            query && ((query = request.serializeObject(query)), (this.url += ~this.url.indexOf("?") ? "&" + query : "?" + query)),
                            xhr.open(this.method, this.url, !0),
                            this._withCredentials && (xhr.withCredentials = !0),
                            "GET" != this.method && "HEAD" != this.method && "string" != typeof data && !isHost(data))
                        ) {
                            var serialize = request.serialize[this.getHeader("Content-Type")];
                            serialize && (data = serialize(data));
                        }
                        for (var field in this.header) null != this.header[field] && xhr.setRequestHeader(field, this.header[field]);
                        return this.emit("request", this), xhr.send(data), this;
                    }),
                    (request.Request = Request),
                    (request.get = function (url, data, fn) {
                        var req = request("GET", url);
                        return "function" == typeof data && ((fn = data), (data = null)), data && req.query(data), fn && req.end(fn), req;
                    }),
                    (request.head = function (url, data, fn) {
                        var req = request("HEAD", url);
                        return "function" == typeof data && ((fn = data), (data = null)), data && req.send(data), fn && req.end(fn), req;
                    }),
                    (request.del = function (url, fn) {
                        var req = request("DELETE", url);
                        return fn && req.end(fn), req;
                    }),
                    (request.patch = function (url, data, fn) {
                        var req = request("PATCH", url);
                        return "function" == typeof data && ((fn = data), (data = null)), data && req.send(data), fn && req.end(fn), req;
                    }),
                    (request.post = function (url, data, fn) {
                        var req = request("POST", url);
                        return "function" == typeof data && ((fn = data), (data = null)), data && req.send(data), fn && req.end(fn), req;
                    }),
                    (request.put = function (url, data, fn) {
                        var req = request("PUT", url);
                        return "function" == typeof data && ((fn = data), (data = null)), data && req.send(data), fn && req.end(fn), req;
                    }),
                    (module.exports = request);
            },
            { emitter: 2, reduce: 3 },
        ],
        2: [
            function (require, module, exports) {
                function Emitter(obj) {
                    if (obj) return mixin(obj);
                }
                function mixin(obj) {
                    for (var key in Emitter.prototype) obj[key] = Emitter.prototype[key];
                    return obj;
                }
                (module.exports = Emitter),
                    (Emitter.prototype.on = Emitter.prototype.addEventListener = function (event, fn) {
                        return (this._callbacks = this._callbacks || {}), (this._callbacks[event] = this._callbacks[event] || []).push(fn), this;
                    }),
                    (Emitter.prototype.once = function (event, fn) {
                        function on() {
                            self.off(event, on), fn.apply(this, arguments);
                        }
                        var self = this;
                        return (this._callbacks = this._callbacks || {}), (on.fn = fn), this.on(event, on), this;
                    }),
                    (Emitter.prototype.off = Emitter.prototype.removeListener = Emitter.prototype.removeAllListeners = Emitter.prototype.removeEventListener = function (event, fn) {
                        if (((this._callbacks = this._callbacks || {}), 0 == arguments.length)) return (this._callbacks = {}), this;
                        var callbacks = this._callbacks[event];
                        if (!callbacks) return this;
                        if (1 == arguments.length) return delete this._callbacks[event], this;
                        for (var cb, i = 0; i < callbacks.length; i++)
                            if (((cb = callbacks[i]), cb === fn || cb.fn === fn)) {
                                callbacks.splice(i, 1);
                                break;
                            }
                        return this;
                    }),
                    (Emitter.prototype.emit = function (event) {
                        this._callbacks = this._callbacks || {};
                        var args = [].slice.call(arguments, 1),
                            callbacks = this._callbacks[event];
                        if (callbacks) {
                            callbacks = callbacks.slice(0);
                            for (var i = 0, len = callbacks.length; i < len; ++i) callbacks[i].apply(this, args);
                        }
                        return this;
                    }),
                    (Emitter.prototype.listeners = function (event) {
                        return (this._callbacks = this._callbacks || {}), this._callbacks[event] || [];
                    }),
                    (Emitter.prototype.hasListeners = function (event) {
                        return !!this.listeners(event).length;
                    });
            },
            {},
        ],
        3: [
            function (require, module, exports) {
                module.exports = function (arr, fn, initial) {
                    for (var idx = 0, len = arr.length, curr = 3 == arguments.length ? initial : arr[idx++]; idx < len; ) curr = fn.call(null, curr, arr[idx], ++idx, arr);
                    return curr;
                };
            },
            {},
        ],
        4: [
            function (require, module, exports) {
                var Clan, ClanError, Endpoints, agent, prefixer;
                (agent = require("superagent")),
                    null == agent.Request.prototype.use &&
                        (agent.Request.prototype.use = function (fn) {
                            return fn(this), this;
                        }),
                    (Endpoints = require("./endpoints.coffee")),
                    (prefixer = require("./prefixer.coffee")),
                    (ClanError = require("./ClanError.coffee")),
                    (Clan = module.exports = function (apikey, apisecret, endpoint) {
                        var appCredentials;
                        return (
                            null == endpoint && (endpoint = null),
                            null != endpoint && Endpoints.set(endpoint),
                            (appCredentials = { "x-apikey": apikey, "x-apisecret": apisecret }),
                            {
                                createGamerCredentials: function (gamer) {
                                    return { gamer_id: gamer.gamer_id, gamer_secret: gamer.gamer_secret };
                                },
                                loginAnonymous: function (options, cb) {
                                    return agent
                                        .post("/v1/login/anonymous")
                                        .use(prefixer)
                                        .send({ options: options })
                                        .set(appCredentials)
                                        .end(function (err, res) {
                                            return null != err ? cb(err) : res.error ? cb(new ClanError(res.status, res.error)) : cb(null, res.body, !0);
                                        });
                                },
                                login: function (network, credentials, options, cb) {
                                    return (
                                        "function" == typeof options && ((cb = options), (options = null)),
                                        null != network
                                            ? agent
                                                  .post("/v1/login")
                                                  .use(prefixer)
                                                  .send({ network: network, credentials, options: options })
                                                  .set(appCredentials)
                                                  .end(function (err, res) {
                                                      return null != err ? cb(err) : res.error ? cb(new ClanError(res.status, res.body)) : cb(null, res.body, !1);
                                                  })
                                            : ((cb = id),
                                              agent
                                                  .post("/v1/login/anonymous")
                                                  .use(prefixer)
                                                  .set(appCredentials)
                                                  .end(function (err, res) {
                                                      return null != err ? cb(err) : res.error ? cb(new ClanError(res.status, res.body)) : cb(null, res.body, !0);
                                                  }))
                                    );
                                },
                                resumeSession: function (gamer_id, gamer_secret, cb) {
                                    return this.login("anonymous", gamer_id, gamer_secret, { preventRegistration: !0 }, cb);
                                },
                                loginWithShortCode: function (shortcode, cb) {
                                    return this.login("restore", "", shortcode, { preventRegistration: !0 }, cb);
                                },
                                runBatch: function (domain, batchName, params, cb) {
                                    return agent
                                        .post("/v1/batch/" + domain + "/" + batchName)
                                        .use(prefixer)
                                        .set(appCredentials)
                                        .send(params)
                                        .end(function (err, res) {
                                            return null != err ? cb(err) : res.error ? cb(new ClanError(res.status, res.body)) : cb(null, res.body);
                                        });
                                },
                                vfs: function (domain) {
                                    return null == domain && (domain = "private"), require("./gamevfs.coffee")(appCredentials, domain);
                                },
                                indexes: function (domain) {
                                    return null == domain && (domain = "private"), require("./indexes.coffee")(appCredentials, domain);
                                },
                                sendResetMailPassword: function (userEmail, mailSender, mailTitle, mailBody, cb) {
                                    var body, htmlBody, textBody;
                                    return (
                                        (textBody = "[[SHORTCODE]]"),
                                        (htmlBody = null),
                                        "object" == typeof mailBody ? (mailBody.html === !0 ? (htmlBody = mailBody.body) : (textBody = mailBody.body)) : (textBody = mailBody),
                                        (body = { from: mailSender, title: mailTitle, body: textBody }),
                                        null !== htmlBody && (body.html = htmlBody),
                                        agent
                                            .post("/v1/login/" + userEmail)
                                            .use(prefixer)
                                            .set(appCredentials)
                                            .send(body)
                                            .end(function (err, res) {
                                                return null != err ? cb(err) : res.error ? cb(new ClanError(res.status, res.body)) : cb(null, res.body);
                                            })
                                    );
                                },
                                userExists: function (network, id, cb) {
                                    return agent
                                        .post("/v1/users/#{network}/#{encodeURIComponent(id)}")
                                        .use(prefixer)
                                        .set(appCredentials)
                                        .end(function (err, res) {
                                            return null != err ? cb(err) : res.error ? cb(new ClanError(res.status, res.body)) : cb(null, res.body);
                                        });
                                },
                                withGamer: function (gamer) {
                                    var creds;
                                    return (
                                        (creds = this.createGamerCredentials(gamer)),
                                        {
                                            transactions: function (domain) {
                                                return null == domain && (domain = "private"), require("./transactions.coffee")(appCredentials, creds, domain);
                                            },
                                            gamervfs: function (domain) {
                                                return null == domain && (domain = "private"), require("./gamervfs.coffee")(appCredentials, creds, domain);
                                            },
                                            friends: function (domain) {
                                                return null == domain && (domain = "private"), require("./friends.coffee")(appCredentials, creds, domain);
                                            },
                                            profile: function () {
                                                return require("./profile.coffee")(appCredentials, creds);
                                            },
                                            properties: function (domain) {
                                                return null == domain && (domain = "private"), require("./properties.coffee")(appCredentials, creds, domain);
                                            },
                                            leaderboards: function (domain) {
                                                return null == domain && (domain = "private"), require("./leaderboards.coffee")(appCredentials, creds, domain);
                                            },
                                            matches: function (domain) {
                                                return null == domain && (domain = "private"), require("./matches.coffee")(appCredentials, creds, domain);
                                            },
                                            kv: function (domain) {
                                                return null == domain && (domain = "private"), require("./kvstore.coffee")(appCredentials, creds, domain);
                                            },
                                            events: function (domain) {
                                                return null == domain && (domain = "private"), require("./event.coffee")(appCredentials, creds, domain);
                                            },
                                            achievements: function (domain) {
                                                return null == domain && (domain = "private"), require("./achievements.coffee")(appCredentials, creds, domain);
                                            },
                                            referral: function (domain) {
                                                return null == domain && (domain = "private"), require("./referral.coffee")(appCredentials, creds, domain);
                                            },
                                            store: function () {
                                                return require("./store.coffee")(appCredentials, creds);
                                            },
                                            runBatch: function (domain, batchName, params, cb) {
                                                return agent
                                                    .post("/v1/gamer/batch/" + domain + "/" + batchName)
                                                    .use(prefixer)
                                                    .set(appCredentials)
                                                    .auth(creds.gamer_id, creds.gamer_secret)
                                                    .send(params)
                                                    .end(function (err, res) {
                                                        return null != err ? cb(err) : res.error ? cb(new ClanError(res.status, res.body)) : cb(null, res.body);
                                                    });
                                            },
                                            outline: function (cb) {
                                                return agent
                                                    .get("/v1/gamer/outline")
                                                    .use(prefixer)
                                                    .set(appCredentials)
                                                    .auth(creds.gamer_id, creds.gamer_secret)
                                                    .end(function (err, res) {
                                                        return null != err ? cb(err) : res.error ? cb(new ClanError(res.status, res.body)) : cb(null, res.body);
                                                    });
                                            },
                                            convertTo: function (network, id, secret, cb) {
                                                return agent
                                                    .post("/v1/gamer/convert")
                                                    .use(prefixer)
                                                    .set(appCredentials)
                                                    .auth(creds.gamer_id, creds.gamer_secret)
                                                    .send({ network: network, id: id, secret: secret })
                                                    .end(function (err, res) {
                                                        return null != err ? cb(err) : res.error ? cb(new ClanError(res.status, res.body)) : cb(null, res.body);
                                                    });
                                            },
                                            link: function (network, id, secret, cb) {
                                                return agent
                                                    .post("v1/gamer/link")
                                                    .use(prefixer)
                                                    .set(appCredentials)
                                                    .auth(creds.gamer_id, creds.gamer_secret)
                                                    .send({ network: network, id: id, secret: secret })
                                                    .end(function (err, res) {
                                                        return null != err ? cb(err) : res.error ? cb(new ClanError(res.status, res.body)) : cb(null, res.body);
                                                    });
                                            },
                                            unlink: function (network, cb) {
                                                return agent
                                                    .post("v1/gamer/unlink")
                                                    .use(prefixer)
                                                    .set(appCredentials)
                                                    .auth(creds.gamer_id, creds.gamer_secret)
                                                    .send({ network: network })
                                                    .end(function (err, res) {
                                                        return null != err ? cb(err) : res.error ? cb(new ClanError(res.status, res.body)) : cb(null, res.body);
                                                    });
                                            },
                                            logout: function (cb) {
                                                return agent
                                                    .post("/v1/gamer/logout")
                                                    .use(prefixer)
                                                    .set(appCredentials)
                                                    .auth(creds.gamer_id, creds.gamer_secret)
                                                    .end(function (err, res) {
                                                        return null != err ? cb(err) : res.error ? cb(new ClanError(res.status, res.body)) : cb(null, res.body);
                                                    });
                                            },
                                            changeEmail: function (newEmailAddress, cb) {
                                                return agent
                                                    .post("/v1/gamer/email")
                                                    .use(prefixer)
                                                    .set(appCredentials)
                                                    .auth(creds.gamer_id, creds.gamer_secret)
                                                    .send({ email: newEmailAddress })
                                                    .end(function (err, res) {
                                                        return null != err ? cb(err) : res.error ? cb(new ClanError(res.status, res.body)) : cb(null, res.body);
                                                    });
                                            },
                                            changePassword: function (newPassword, cb) {
                                                return agent
                                                    .post("/v1/gamer/password")
                                                    .use(prefixer)
                                                    .set(appCredentials)
                                                    .auth(creds.gamer_id, creds.gamer_secret)
                                                    .send({ password: newPassword })
                                                    .end(function (err, res) {
                                                        return null != err ? cb(err) : res.error ? cb(new ClanError(res.status, res.body)) : cb(null, res.body);
                                                    });
                                            },
                                            listUsers: function (filter, limit, skip, cb) {
                                                return agent
                                                    .post("/v1/gamer?q=#{encodeURIComponent(filter)}&limit=#{limit}&skip=#{skip}")
                                                    .use(prefixer)
                                                    .set(appCredentials)
                                                    .auth(creds.gamer_id, creds.gamer_secret)
                                                    .end(function (err, res) {
                                                        return null != err ? cb(err) : res.error ? cb(new ClanError(res.status, res.body)) : cb(null, res.body);
                                                    });
                                            },
                                        }
                                    );
                                },
                                privateDomain: "private",
                            }
                        );
                    });
            },
            {
                "./ClanError.coffee": 5,
                "./achievements.coffee": 6,
                "./endpoints.coffee": 7,
                "./event.coffee": 8,
                "./friends.coffee": 9,
                "./gamervfs.coffee": 10,
                "./gamevfs.coffee": 11,
                "./indexes.coffee": 13,
                "./kvstore.coffee": 14,
                "./leaderboards.coffee": 15,
                "./matches.coffee": 16,
                "./prefixer.coffee": 17,
                "./profile.coffee": 18,
                "./properties.coffee": 19,
                "./referral.coffee": 20,
                "./store.coffee": 21,
                "./transactions.coffee": 22,
                superagent: 1,
            },
        ],
        5: [
            function (require, module, exports) {
                var ClanError,
                    endpoints,
                    extend = function (child, parent) {
                        function ctor() {
                            this.constructor = child;
                        }
                        for (var key in parent) hasProp.call(parent, key) && (child[key] = parent[key]);
                        return (ctor.prototype = parent.prototype), (child.prototype = new ctor()), (child.__super__ = parent.prototype), child;
                    },
                    hasProp = {}.hasOwnProperty;
                (endpoints = require("./endpoints.coffee")),
                    (ClanError = (function (superClass) {
                        function ClanError(status, response) {
                            (this.status = status),
                                (this.response = response),
                                (this.message = this.response.message),
                                (this.type = this.response.type),
                                (this.name = this.response.name),
                                (this.status < 100 || (this.status >= 300 && this.status < 400) || this.status >= 500) && endpoints.tryOther();
                        }
                        return extend(ClanError, superClass), ClanError;
                    })(Error)),
                    (module.exports = ClanError);
            },
            { "./endpoints.coffee": 7 },
        ],
        6: [
            function (require, module, exports) {
                var ClanError, agent, prefixer;
                (agent = require("superagent")),
                    (prefixer = require("./prefixer.coffee")),
                    (ClanError = require("./ClanError.coffee")),
                    (module.exports = function (appCredentials, gamerCred, domain) {
                        return {
                            list: function (cb) {
                                return agent
                                    .get("/v1/gamer/achievements/" + domain)
                                    .use(prefixer)
                                    .set(appCredentials)
                                    .auth(gamerCred.gamer_id, gamerCred.gamer_secret)
                                    .end(function (err, res) {
                                        return null != err ? cb(err) : res.error ? cb(new ClanError(res.status, res.body)) : cb(null, res.body);
                                    });
                            },
                            associateData: function (name, data, cb) {
                                return agent
                                    .post("/v1/gamer/achievements/" + domain + "/" + name + "/gamerdata")
                                    .use(prefixer)
                                    .set(appCredentials)
                                    .send(data)
                                    .auth(gamerCred.gamer_id, gamerCred.gamer_secret)
                                    .end(function (err, res) {
                                        return null != err ? cb(err) : res.error ? cb(new ClanError(res.status, res.body)) : cb(null, res.body);
                                    });
                            },
                        };
                    });
            },
            { "./ClanError.coffee": 5, "./prefixer.coffee": 17, superagent: 1 },
        ],
        7: [
            function (require, module, exports) {
                var endpoints;
                (endpoints = {
                    url: "https://sandbox-api01.clanofthecloud.mobi",
                    current: { url: "https://sandbox-api[id].clanofthecloud.mobi", count: 2 },
                    sandbox: { url: "https://sandbox-api[id].clanofthecloud.mobi", count: 2 },
                    prod: { url: "https://prod-api[id].clanofthecloud.mobi", count: 16 },
                    dev: { url: "http://localhost:2000", count: 1 },
                }),
                    (module.exports = {
                        set: function (endpoint) {
                            if ("sandbox" === endpoint) endpoints.current = endpoints.sandbox;
                            else if ("prod" === endpoint) endpoints.current = endpoints.prod;
                            else if ("dev" === endpoint) endpoints.current = endpoints.dev;
                            else {
                                if ("string" != typeof endpoint || "" === endpoint) throw new Error("endpoint must be either dev|sandbox|prod or an url");
                                endpoints.current = { url: endpoint, count: 1 };
                            }
                            return (endpoints.url = endpoints.current.url), this.tryOther();
                        },
                        current: function () {
                            return null != endpoints.url ? endpoints.url : (this.tryOther, endpoints.url);
                        },
                        tryOther: function () {
                            if (endpoints.current.url.indexOf("[id]") !== -1)
                                return (endpoints.url = endpoints.current.url.replace("[id]", ("0" + Math.floor(Math.random() * endpoints.current.count + 1)).slice(-2))), console.log("new url : " + endpoints.url);
                        },
                    });
            },
            {},
        ],
        8: [
            function (require, module, exports) {
                var ClanError, _timeout, agent, prefixer;
                (agent = require("superagent")),
                    (prefixer = require("./prefixer.coffee")),
                    (ClanError = require("./ClanError.coffee")),
                    (_timeout = 5e4),
                    (module.exports = function (appCredentials, gamerCred, domain) {
                        return {
                            setTimeout: function (timeout) {
                                return (_timeout = timeout);
                            },
                            send: function (gamer_id, message, osn, cb) {
                                var evt;
                                return (
                                    (evt = { type: "user", event: message, from: gamerCred.gamer_id, to: gamer_id }),
                                    null != osn && (evt.osn = osn),
                                    agent
                                        .post("/v1/gamer/event/" + domain + "/" + gamer_id)
                                        .use(prefixer)
                                        .set(appCredentials)
                                        .auth(gamerCred.gamer_id, gamerCred.gamer_secret)
                                        .send(evt)
                                        .end(function (err, res) {
                                            return null != err ? cb(err) : res.error ? cb(new ClanError(res.status, res.body)) : cb(null, res.body);
                                        })
                                );
                            },
                            sendVolatile: function (gamer_id, message, cb) {
                                return agent
                                    .post("/v1/gamer/event/volatile/" + domain + "/" + gamer_id)
                                    .use(prefixer)
                                    .set(appCredentials)
                                    .auth(gamerCred.gamer_id, gamerCred.gamer_secret)
                                    .send(message)
                                    .end(function (err, res) {
                                        return null != err ? cb(err) : res.error ? cb(new ClanError(res.status, res.body)) : cb(null, res.body);
                                    });
                            },
                            receive: function (ack, cb) {
                                return (
                                    null == ack && (ack = "auto"),
                                    null == cb && ((cb = ack), (ack = "auto")),
                                    agent
                                        .get("/v1/gamer/event/" + domain + "?ack=" + ack + "&timeout=" + _timeout)
                                        .use(prefixer)
                                        .set(appCredentials)
                                        .auth(gamerCred.gamer_id, gamerCred.gamer_secret)
                                        .end(function (err, res) {
                                            return null != err ? cb(err) : res.error ? cb(new ClanError(res.status, res.body)) : 204 === res.status ? cb(null, null) : cb(null, res.body);
                                        })
                                );
                            },
                        };
                    });
            },
            { "./ClanError.coffee": 5, "./prefixer.coffee": 17, superagent: 1 },
        ],
        9: [
            function (require, module, exports) {
                var ClanError, agent, prefixer;
                (agent = require("superagent")),
                    (prefixer = require("./prefixer.coffee")),
                    (ClanError = require("./ClanError.coffee")),
                    (module.exports = function (appCredentials, gamerCred, domain) {
                        return {
                            get: function (cb) {
                                return agent
                                    .get("/v2.6/gamer/friends/" + domain)
                                    .use(prefixer)
                                    .set(appCredentials)
                                    .auth(gamerCred.gamer_id, gamerCred.gamer_secret)
                                    .end(function (err, res) {
                                        return null != err ? cb(err) : res.error ? cb(new ClanError(res.status, res.body)) : cb(null, res.body);
                                    });
                            },
                            getBlacklisted: function (cb) {
                                return agent
                                    .get("/v2.6/gamer/friends/" + domain + "?status=blacklist")
                                    .use(prefixer)
                                    .set(appCredentials)
                                    .auth(gamerCred.gamer_id, gamerCred.gamer_secret)
                                    .end(function (err, res) {
                                        return null != err ? cb(err) : res.error ? cb(new ClanError(res.status, res.body)) : cb(null, res.body);
                                    });
                            },
                            status: function (friendid, newstatus, cb) {
                                return agent
                                    .post("/v2.6/gamer/friends/" + domain + "/" + friendid + "?status=" + newstatus)
                                    .use(prefixer)
                                    .set(appCredentials)
                                    .auth(gamerCred.gamer_id, gamerCred.gamer_secret)
                                    .end(function (err, res) {
                                        return null != err ? cb(err) : res.error ? cb(new ClanError(res.status, res.body)) : cb(null, res.body);
                                    });
                            },
                            networkFriends: function (network, friends, automatching, cb) {
                                return agent
                                    .post("/v2.12/gamer/friends/" + domain + "?network=" + network)
                                    .use(prefixer)
                                    .send({ friends: friends, automatching: automatching })
                                    .set(appCredentials)
                                    .auth(gamerCred.gamer_id, gamerCred.gamer_secret)
                                    .end(function (err, res) {
                                        return null != err ? cb(err) : res.error ? cb(new ClanError(res.status, res.body)) : cb(null, res.body);
                                    });
                            },
                        };
                    });
            },
            { "./ClanError.coffee": 5, "./prefixer.coffee": 17, superagent: 1 },
        ],
        10: [
            function (require, module, exports) {
                var ClanError, agent, prefixer;
                (agent = require("superagent")),
                    (prefixer = require("./prefixer.coffee")),
                    (ClanError = require("./ClanError.coffee")),
                    (module.exports = function (appCredentials, gamerCred, domain) {
                        return {
                            getValue: function (key, cb) {
                                return (
                                    null == key && (key = ""),
                                    agent
                                        .get("/v3.0/gamer/vfs/" + domain + "/" + key)
                                        .use(prefixer)
                                        .set(appCredentials)
                                        .auth(gamerCred.gamer_id, gamerCred.gamer_secret)
                                        .end(function (err, res) {
                                            return null != err ? cb(err) : res.error ? cb(new ClanError(res.status, res.body)) : cb(null, res.body);
                                        })
                                );
                            },
                            get: function (key, cb) {
                                return (
                                    null == key && (key = ""),
                                    agent
                                        .get("/v1/gamer/vfs/" + domain + "/" + key)
                                        .use(prefixer)
                                        .set(appCredentials)
                                        .auth(gamerCred.gamer_id, gamerCred.gamer_secret)
                                        .end(function (err, res) {
                                            return null != err ? cb(err) : res.error ? cb(new ClanError(res.status, res.body)) : cb(null, res.body);
                                        })
                                );
                            },
                            setValue: function (key, value, cb) {
                                return (
                                    null == key && (key = ""),
                                    agent
                                        .put("/v3.0/gamer/vfs/" + domain + "/" + key)
                                        .use(prefixer)
                                        .type("json")
                                        .send(value)
                                        .set(appCredentials)
                                        .auth(gamerCred.gamer_id, gamerCred.gamer_secret)
                                        .end(function (err, res) {
                                            return null != err ? cb(err) : res.error ? cb(new ClanError(res.status, res.body)) : cb(null, res.body);
                                        })
                                );
                            },
                            set: function (key, value, cb) {
                                return (
                                    null == key && (key = ""),
                                    agent
                                        .put("/v1/gamer/vfs/" + domain + "/" + key)
                                        .use(prefixer)
                                        .type("json")
                                        .send(JSON.stringify(value))
                                        .set(appCredentials)
                                        .auth(gamerCred.gamer_id, gamerCred.gamer_secret)
                                        .end(function (err, res) {
                                            return null != err ? cb(err) : res.error ? cb(new ClanError(res.status, res.body)) : cb(null, res.body);
                                        })
                                );
                            },
                            deleteValue: function (key, cb) {
                                return (
                                    null == key && (key = ""),
                                    agent
                                        .del("/v3.0/gamer/vfs/" + domain + "/" + key)
                                        .use(prefixer)
                                        .set(appCredentials)
                                        .auth(gamerCred.gamer_id, gamerCred.gamer_secret)
                                        .end(function (err, res) {
                                            return null != err ? cb(err) : res.error ? cb(new ClanError(res.status, res.body)) : cb(null, res.body);
                                        })
                                );
                            },
                            del: function (key, cb) {
                                return (
                                    null == key && (key = ""),
                                    agent
                                        .del("/v1/gamer/vfs/" + domain + "/" + key)
                                        .use(prefixer)
                                        .set(appCredentials)
                                        .auth(gamerCred.gamer_id, gamerCred.gamer_secret)
                                        .end(function (err, res) {
                                            return null != err ? cb(err) : res.error ? cb(new ClanError(res.status, res.body)) : cb(null, res.body);
                                        })
                                );
                            },
                            setBinary: function (key, cb) {
                                return (
                                    null == key && cb(new new Error("setBinary needs a key to be able to upload data")()),
                                    agent
                                        .put("/v3.0/gamer/vfs/" + domain + "/" + key + "?binary")
                                        .use(prefixer)
                                        .type("json")
                                        .set(appCredentials)
                                        .auth(gamerCred.gamer_id, gamerCred.gamer_secret)
                                        .end(function (err, res) {
                                            return null != err ? cb(err) : res.error ? cb(new ClanError(res.status, res.body)) : cb(null, res.body);
                                        })
                                );
                            },
                        };
                    });
            },
            { "./ClanError.coffee": 5, "./prefixer.coffee": 17, superagent: 1 },
        ],
        11: [
            function (require, module, exports) {
                var ClanError, agent, prefixer;
                (agent = require("superagent")),
                    (prefixer = require("./prefixer.coffee")),
                    (ClanError = require("./ClanError.coffee")),
                    (module.exports = function (appCredentials, domain) {
                        return {
                            get: function (key, cb) {
                                return (
                                    null == key && (key = ""),
                                    agent
                                        .get("/v1/vfs/" + domain + "/" + key)
                                        .use(prefixer)
                                        .set(appCredentials)
                                        .end(function (err, res) {
                                            return null != err ? cb(err) : res.error ? cb(new ClanError(res.status, res.body)) : cb(null, res.body);
                                        })
                                );
                            },
                            getValue: function (key, cb) {
                                return (
                                    null == key && (key = ""),
                                    agent
                                        .get("/v3.0/vfs/" + domain + "/" + key)
                                        .use(prefixer)
                                        .set(appCredentials)
                                        .end(function (err, res) {
                                            return null != err ? cb(err) : res.error ? cb(new ClanError(res.status, res.body)) : cb(null, res.body);
                                        })
                                );
                            },
                        };
                    });
            },
            { "./ClanError.coffee": 5, "./prefixer.coffee": 17, superagent: 1 },
        ],
        12: [
            function (require, module, exports) {
                (global = window = window ? window : global ? global : null), "undefined" != typeof window && null !== window && (window.Clan = require("./Clan.coffee"));
            },
            { "./Clan.coffee": 4 },
        ],
        13: [
            function (require, module, exports) {
                var ClanError, agent, prefixer;
                (agent = require("superagent")),
                    (prefixer = require("./prefixer.coffee")),
                    (ClanError = require("./ClanError.coffee")),
                    (module.exports = function (appCredentials, domain) {
                        return {
                            set: function (indexName, id, properties, payload, cb) {
                                var index;
                                return (
                                    (index = { id: id, properties: properties, payload: payload }),
                                    agent
                                        .post("/v1/index/" + domain + "/" + indexName)
                                        .use(prefixer)
                                        .set(appCredentials)
                                        .type("json")
                                        .send(index)
                                        .end(function (err, res) {
                                            return null != err ? cb(err) : res.error ? cb(new ClanError(res.status, res.body)) : cb(null, res.body);
                                        })
                                );
                            },
                            get: function (indexName, id, cb) {
                                return agent
                                    .get("/v1/index/" + domain + "/" + indexName + "/" + id)
                                    .use(prefixer)
                                    .set(appCredentials)
                                    .end(function (err, res) {
                                        return null != err ? cb(err) : res.error ? cb(new ClanError(res.status, res.body)) : cb(null, res.body);
                                    });
                            },
                            del: function (indexName, id, cb) {
                                return agent
                                    .del("/v1/index/" + domain + "/" + indexName + "/" + id)
                                    .use(prefixer)
                                    .set(appCredentials)
                                    .end(function (err, res) {
                                        return null != err ? cb(err) : res.error ? cb(new ClanError(res.status, res.body)) : cb(null, res.body);
                                    });
                            },
                            search: function (indexName, q, sort, skip, limit, cb) {
                                var query;
                                return (
                                    (query = "?q=" + encodeURIComponent(q)),
                                    null != skip && (query += "&from=" + skip),
                                    null != limit && (query += "&max=" + limit),
                                    null != sort && (query += "&sort=" + encodeURIComponent(sort)),
                                    agent
                                        .post("/v1/index/" + domain + "/" + indexName + "/search" + query)
                                        .use(prefixer)
                                        .set(appCredentials)
                                        .end(function (err, res) {
                                            return null != err ? cb(err) : res.error ? cb(new ClanError(res.status, res.body)) : cb(null, res.body);
                                        })
                                );
                            },
                            query: function (indexName, query, skip, limit, cb) {
                                var param;
                                return (
                                    (param = "?from=" + (null != skip ? Number(skip) : 0)),
                                    null != limit && (param += "&max=" + limit),
                                    agent
                                        .post("/v1/index/" + domain + "/" + indexName + "/search" + param)
                                        .use(prefixer)
                                        .set(appCredentials)
                                        .type("json")
                                        .send(query)
                                        .end(function (err, res) {
                                            return null != err ? cb(err) : res.error ? cb(new ClanError(res.status, res.body)) : cb(null, res.body);
                                        })
                                );
                            },
                        };
                    });
            },
            { "./ClanError.coffee": 5, "./prefixer.coffee": 17, superagent: 1 },
        ],
        14: [
            function (require, module, exports) {
                var ClanError, agent, prefixer;
                (agent = require("superagent")),
                    (prefixer = require("./prefixer.coffee")),
                    (ClanError = require("./ClanError.coffee")),
                    (module.exports = function (appCredentials, gamerCred, domain) {
                        return {
                            get: function (key, cb) {
                                return (
                                    null == key && (key = ""),
                                    agent
                                        .get("/v1/gamer/kv/" + domain + "/" + key)
                                        .use(prefixer)
                                        .set(appCredentials)
                                        .auth(gamerCred.gamer_id, gamerCred.gamer_secret)
                                        .end(function (err, res) {
                                            return null != err ? cb(err) : res.error ? cb(new ClanError(res.status, res.body)) : cb(null, res.body);
                                        })
                                );
                            },
                            set: function (key, value, cb) {
                                return (
                                    null == key && (key = ""),
                                    agent
                                        .post("/v1/gamer/kv/" + domain + "/" + key)
                                        .use(prefixer)
                                        .set(appCredentials)
                                        .auth(gamerCred.gamer_id, gamerCred.gamer_secret)
                                        .type("json")
                                        .send({ value: value })
                                        .end(function (err, res) {
                                            return null != err ? cb(err) : res.error ? cb(new ClanError(res.status, res.body)) : cb(null, res.body);
                                        })
                                );
                            },
                            del: function (key, cb) {
                                return (
                                    null == key && (key = ""),
                                    agent
                                        .del("/v1/gamer/kv/" + domain + "/" + key)
                                        .use(prefixer)
                                        .set(appCredentials)
                                        .auth(gamerCred.gamer_id, gamerCred.gamer_secret)
                                        .end(function (err, res) {
                                            return null != err ? cb(err) : res.error ? cb(new ClanError(res.status, res.body)) : cb(null, res.body);
                                        })
                                );
                            },
                            acl: function (key, acl, cb) {
                                return (
                                    null == key && (key = ""),
                                    agent
                                        .post("/v1/gamer/kv/" + domain + "/" + key + "/acl")
                                        .use(prefixer)
                                        .set(appCredentials)
                                        .auth(gamerCred.gamer_id, gamerCred.gamer_secret)
                                        .type("json")
                                        .send({ acl: acl })
                                        .end(function (err, res) {
                                            return null != err ? cb(err) : res.error ? cb(new ClanError(res.status, res.body)) : cb(null, res.body);
                                        })
                                );
                            },
                        };
                    });
            },
            { "./ClanError.coffee": 5, "./prefixer.coffee": 17, superagent: 1 },
        ],
        15: [
            function (require, module, exports) {
                var ClanError, agent, prefixer;
                (agent = require("superagent")),
                    (prefixer = require("./prefixer.coffee")),
                    (ClanError = require("./ClanError.coffee")),
                    (module.exports = function (appCredentials, gamerCred, domain) {
                        return {
                            post: function (score, board, order, info, force, cb) {
                                return agent
                                    .post("/v2.6/gamer/scores/" + domain + "/" + board + "?order=" + order + "&force=" + force)
                                    .use(prefixer)
                                    .set(appCredentials)
                                    .auth(gamerCred.gamer_id, gamerCred.gamer_secret)
                                    .send({ score: score, info: info })
                                    .end(function (err, res) {
                                        return null != err ? cb(err) : res.error ? cb(new ClanError(res.status, res.body)) : cb(null, res.body);
                                    });
                            },
                            getRank: function (score, board, cb) {
                                return agent
                                    .put("/v2.6/gamer/scores/" + domain + "/" + board)
                                    .use(prefixer)
                                    .set(appCredentials)
                                    .auth(gamerCred.gamer_id, gamerCred.gamer_secret)
                                    .send(score)
                                    .end(function (err, res) {
                                        return null != err ? cb(err) : res.error ? cb(new ClanError(res.status, res.body)) : cb(null, res.body);
                                    });
                            },
                            set: function (board, order, score, cb) {
                                return agent
                                    .post("/v2.6/gamer/scores/" + domain + "/" + board + "?order=" + order)
                                    .use(prefixer)
                                    .set(appCredentials)
                                    .auth(gamerCred.gamer_id, gamerCred.gamer_secret)
                                    .send(score)
                                    .end(function (err, res) {
                                        return null != err ? cb(err) : res.error ? cb(new ClanError(res.status, res.body)) : cb(null, res.body);
                                    });
                            },
                            get: function (cb) {
                                return agent
                                    .get("/v2.6/gamer/bestscores/" + domain)
                                    .use(prefixer)
                                    .set(appCredentials)
                                    .auth(gamerCred.gamer_id, gamerCred.gamer_secret)
                                    .end(function (err, res) {
                                        return null != err ? cb(err) : res.error ? cb(new ClanError(res.status, res.body)) : cb(null, res.body);
                                    });
                            },
                            getHighscores: function (board, page, count, cb) {
                                return agent
                                    .get("/v2.6/gamer/scores/" + domain + "/" + board + "?page=" + page + "&count=" + count)
                                    .use(prefixer)
                                    .set(appCredentials)
                                    .auth(gamerCred.gamer_id, gamerCred.gamer_secret)
                                    .end(function (err, res) {
                                        return null != err ? cb(err) : res.error ? cb(new ClanError(res.status, res.body)) : cb(null, res.body);
                                    });
                            },
                            getFriendsHighscores: function (board, page, count, cb) {
                                return agent
                                    .get("/v2.6/gamer/scores/" + domain + "/" + board + "?page=" + page + "&count=" + count + "&type=friendscore")
                                    .use(prefixer)
                                    .set(appCredentials)
                                    .auth(gamerCred.gamer_id, gamerCred.gamer_secret)
                                    .end(function (err, res) {
                                        return null != err ? cb(err) : res.error ? cb(new ClanError(res.status, res.body)) : cb(null, res.body);
                                    });
                            },
                            getCenteredHighscores: function (board, count, cb) {
                                return agent
                                    .get("/v2.6/gamer/scores/" + domain + "/" + board + "?page=me&count=" + count)
                                    .use(prefixer)
                                    .set(appCredentials)
                                    .auth(gamerCred.gamer_id, gamerCred.gamer_secret)
                                    .end(function (err, res) {
                                        return null != err ? cb(err) : res.error ? cb(new ClanError(res.status, res.body)) : cb(null, res.body);
                                    });
                            },
                        };
                    });
            },
            { "./ClanError.coffee": 5, "./prefixer.coffee": 17, superagent: 1 },
        ],
        16: [
            function (require, module, exports) {
                var ClanError, agent, prefixer;
                (agent = require("superagent")),
                    (prefixer = require("./prefixer.coffee")),
                    (ClanError = require("./ClanError.coffee")),
                    (module.exports = function (appCredentials, gamerCred, domain) {
                        return {
                            list: function (options, cb) {
                                var queryoptions;
                                return (
                                    (queryoptions = ""),
                                    null != (null != options ? options.full : void 0) && (queryoptions += "&full"),
                                    null != (null != options ? options.participating : void 0) && (queryoptions += "&participating"),
                                    null != (null != options ? options.finished : void 0) && (queryoptions += "&finished"),
                                    null != (null != options ? options.invited : void 0) && (queryoptions += "&invited"),
                                    null != (null != options ? options.skip : void 0) && (queryoptions += "&skip=" + options.skip),
                                    null != (null != options ? options.limit : void 0) && (queryoptions += "&limit=" + options.limit),
                                    agent
                                        .get("/v1/gamer/matches?domain=" + domain + queryoptions)
                                        .use(prefixer)
                                        .set(appCredentials)
                                        .auth(gamerCred.gamer_id, gamerCred.gamer_secret)
                                        .end(function (err, res) {
                                            return null != err ? cb(err) : res.error ? cb(new ClanError(res.status, res.body)) : cb(null, res.body);
                                        })
                                );
                            },
                            create: function (matchData, cb) {
                                return agent
                                    .post("/v1/gamer/matches?domain=" + domain)
                                    .use(prefixer)
                                    .set(appCredentials)
                                    .auth(gamerCred.gamer_id, gamerCred.gamer_secret)
                                    .type("json")
                                    .send(matchData)
                                    .end(function (err, res) {
                                        return null != err ? cb(err) : res.error ? cb(new ClanError(res.status, res.body)) : cb(null, res.body);
                                    });
                            },
                            get: function (matchID, cb) {
                                return agent
                                    .get("/v1/gamer/matches/" + matchID)
                                    .use(prefixer)
                                    .set(appCredentials)
                                    .auth(gamerCred.gamer_id, gamerCred.gamer_secret)
                                    .end(function (err, res) {
                                        return null != err ? cb(err) : res.error ? cb(new ClanError(res.status, res.body)) : cb(null, res.body);
                                    });
                            },
                            del: function (matchID, cb) {
                                return agent
                                    .del("/v1/gamer/matches/" + matchID)
                                    .use(prefixer)
                                    .set(appCredentials)
                                    .auth(gamerCred.gamer_id, gamerCred.gamer_secret)
                                    .end(function (err, res) {
                                        return null != err ? cb(err) : res.error ? cb(new ClanError(res.status, res.body)) : cb(null, res.body);
                                    });
                            },
                            join: function (matchID, osn, cb) {
                                return agent
                                    .post("/v1/gamer/matches/" + matchID + "/join")
                                    .use(prefixer)
                                    .set(appCredentials)
                                    .auth(gamerCred.gamer_id, gamerCred.gamer_secret)
                                    .type("json")
                                    .send(osn)
                                    .end(function (err, res) {
                                        return null != err ? cb(err) : res.error ? cb(new ClanError(res.status, res.body)) : cb(null, res.body);
                                    });
                            },
                            leave: function (matchID, osn, cb) {
                                return agent
                                    .post("/v1/gamer/matches/" + matchID + "/leave")
                                    .use(prefixer)
                                    .set(appCredentials)
                                    .auth(gamerCred.gamer_id, gamerCred.gamer_secret)
                                    .type("json")
                                    .send(osn)
                                    .end(function (err, res) {
                                        return null != err ? cb(err) : res.error ? cb(new ClanError(res.status, res.body)) : cb(null, res.body);
                                    });
                            },
                            invite: function (matchID, friendID, osn, cb) {
                                return agent
                                    .post("/v1/gamer/matches/" + matchID + "/invite/" + friendID)
                                    .use(prefixer)
                                    .set(appCredentials)
                                    .auth(gamerCred.gamer_id, gamerCred.gamer_secret)
                                    .type("json")
                                    .send(osn)
                                    .end(function (err, res) {
                                        return null != err ? cb(err) : res.error ? cb(new ClanError(res.status, res.body)) : cb(null, res.body);
                                    });
                            },
                            dismiss: function (matchID, cb) {
                                return agent
                                    .del("/v1/gamer/matches/" + matchID + "/invitation")
                                    .use(prefixer)
                                    .set(appCredentials)
                                    .auth(gamerCred.gamer_id, gamerCred.gamer_secret)
                                    .end(function (err, res) {
                                        return null != err ? cb(err) : res.error ? cb(new ClanError(res.status, res.body)) : cb(null, res.body);
                                    });
                            },
                            move: function (matchID, lastEventID, move, globalState, osn, cb) {
                                return (
                                    "function" == typeof osn && ((cb = osn), (osn = null)),
                                    null != osn && (move.osn = osn),
                                    agent
                                        .post("/v1/gamer/matches/" + matchID + "/move?lastEventId=" + lastEventID)
                                        .use(prefixer)
                                        .set(appCredentials)
                                        .auth(gamerCred.gamer_id, gamerCred.gamer_secret)
                                        .type("json")
                                        .send({ move: move, globalState: globalState })
                                        .end(function (err, res) {
                                            return null != err ? cb(err) : res.error ? cb(new ClanError(res.status, res.body)) : cb(null, res.body);
                                        })
                                );
                            },
                            finish: function (matchID, lastEventID, osn, cb) {
                                return agent
                                    .post("/v1/gamer/matches/" + matchID + "/finish?lastEventId=" + lastEventID)
                                    .use(prefixer)
                                    .set(appCredentials)
                                    .auth(gamerCred.gamer_id, gamerCred.gamer_secret)
                                    .type("json")
                                    .send(osn)
                                    .end(function (err, res) {
                                        return null != err ? cb(err) : res.error ? cb(new ClanError(res.status, res.body)) : cb(null, res.body);
                                    });
                            },
                            draw: function (matchID, lastEventID, count, osn, cb) {
                                return agent
                                    .post("/v1/gamer/matches/" + matchID + "/shoe/draw?lastEventId=" + lastEventID + "&count=" + count)
                                    .use(prefixer)
                                    .set(appCredentials)
                                    .auth(gamerCred.gamer_id, gamerCred.gamer_secret)
                                    .type("json")
                                    .send(osn)
                                    .end(function (err, res) {
                                        return null != err ? cb(err) : res.error ? cb(new ClanError(res.status, res.body)) : cb(null, res.body);
                                    });
                            },
                        };
                    });
            },
            { "./ClanError.coffee": 5, "./prefixer.coffee": 17, superagent: 1 },
        ],
        17: [
            function (require, module, exports) {
                var Endpoints;
                (Endpoints = require("./endpoints.coffee")),
                    (module.exports = function (request) {
                        return (request.url = Endpoints.current() + request.url), request;
                    });
            },
            { "./endpoints.coffee": 7 },
        ],
        18: [
            function (require, module, exports) {
                var ClanError, agent, prefixer;
                (agent = require("superagent")),
                    (prefixer = require("./prefixer.coffee")),
                    (ClanError = require("./ClanError.coffee")),
                    (module.exports = function (appCredentials, gamerCred) {
                        return {
                            get: function (cb) {
                                return agent
                                    .get("/v1/gamer/profile")
                                    .use(prefixer)
                                    .set(appCredentials)
                                    .auth(gamerCred.gamer_id, gamerCred.gamer_secret)
                                    .end(function (err, res) {
                                        return null != err ? cb(err) : res.error ? cb(new ClanError(res.status, res.body)) : cb(null, res.body);
                                    });
                            },
                            set: function (newProfile, cb) {
                                var key;
                                return (
                                    ("undefined" != typeof key && null !== key) || (key = ""),
                                    agent
                                        .post("/v1/gamer/profile")
                                        .use(prefixer)
                                        .type("json")
                                        .send(newProfile)
                                        .set(appCredentials)
                                        .auth(gamerCred.gamer_id, gamerCred.gamer_secret)
                                        .end(function (err, res) {
                                            return null != err ? cb(err) : res.error ? cb(new ClanError(res.status, res.body)) : cb(null, res.body);
                                        })
                                );
                            },
                        };
                    });
            },
            { "./ClanError.coffee": 5, "./prefixer.coffee": 17, superagent: 1 },
        ],
        19: [
            function (require, module, exports) {
                var ClanError, agent, prefixer;
                (agent = require("superagent")),
                    (prefixer = require("./prefixer.coffee")),
                    (ClanError = require("./ClanError.coffee")),
                    (module.exports = function (appCredentials, gamerCred, domain) {
                        return {
                            get: function (key, cb) {
                                return (
                                    null == key && (key = ""),
                                    agent
                                        .get("/v2.6/gamer/property/" + domain + "/" + key)
                                        .use(prefixer)
                                        .set(appCredentials)
                                        .auth(gamerCred.gamer_id, gamerCred.gamer_secret)
                                        .end(function (err, res) {
                                            return null != err ? cb(err) : res.error ? cb(new ClanError(res.status, res.body)) : cb(null, res.body);
                                        })
                                );
                            },
                            set: function (key, value, cb) {
                                return (
                                    null == key && (key = ""),
                                    agent
                                        .post("/v2.6/gamer/property/" + domain + "/" + key)
                                        .use(prefixer)
                                        .type("json")
                                        .send({ value: value })
                                        .set(appCredentials)
                                        .auth(gamerCred.gamer_id, gamerCred.gamer_secret)
                                        .end(function (err, res) {
                                            return null != err ? cb(err) : res.error ? cb(new ClanError(res.status, res.body)) : cb(null, res.body);
                                        })
                                );
                            },
                            delete: function (key, cb) {
                                return (
                                    null == key && (key = ""),
                                    agent
                                        .del("/v2.6/gamer/property/" + domain + "/" + key)
                                        .use(prefixer)
                                        .set(appCredentials)
                                        .auth(gamerCred.gamer_id, gamerCred.gamer_secret)
                                        .end(function (err, res) {
                                            return null != err ? cb(err) : res.error ? cb(new ClanError(res.status, res.body)) : cb(null, res.body);
                                        })
                                );
                            },
                            load: function (cb) {
                                return agent
                                    .get("/v2.6/gamer/property/" + domain)
                                    .use(prefixer)
                                    .set(appCredentials)
                                    .auth(gamerCred.gamer_id, gamerCred.gamer_secret)
                                    .end(function (err, res) {
                                        return null != err ? cb(err) : res.error ? cb(new ClanError(res.status, res.body)) : cb(null, res.body);
                                    });
                            },
                            save: function (data, cb) {
                                return agent
                                    .post("/v2.6/gamer/property/" + domain)
                                    .use(prefixer)
                                    .type("json")
                                    .send(data)
                                    .set(appCredentials)
                                    .auth(gamerCred.gamer_id, gamerCred.gamer_secret)
                                    .end(function (err, res) {
                                        return null != err ? cb(err) : res.error ? cb(new ClanError(res.status, res.body)) : cb(null, res.body);
                                    });
                            },
                            remove: function (cb) {
                                return agent
                                    .del("/v2.6/gamer/property/" + domain)
                                    .use(prefixer)
                                    .set(appCredentials)
                                    .auth(gamerCred.gamer_id, gamerCred.gamer_secret)
                                    .end(function (err, res) {
                                        return null != err ? cb(err) : res.error ? cb(new ClanError(res.status, res.body)) : cb(null, res.body);
                                    });
                            },
                            find: function (target, cb) {
                                return agent
                                    .get("/v2.6/gamer/matchproperties/" + domain)
                                    .use(prefixer)
                                    .set(appCredentials)
                                    .auth(gamerCred.gamer_id, gamerCred.gamer_secret)
                                    .send(target)
                                    .end(function (err, res) {
                                        return null != err ? cb(err) : res.error ? cb(new ClanError(res.status, res.body)) : cb(null, res.body);
                                    });
                            },
                        };
                    });
            },
            { "./ClanError.coffee": 5, "./prefixer.coffee": 17, superagent: 1 },
        ],
        20: [
            function (require, module, exports) {
                var ClanError, agent, prefixer;
                (agent = require("superagent")),
                    (prefixer = require("./prefixer.coffee")),
                    (ClanError = require("./ClanError.coffee")),
                    (module.exports = function (appCredentials, gamerCred, domain) {
                        return {
                            getCode: function (cb) {
                                return agent
                                    .put("/v2.6/gamer/godfather/" + domain)
                                    .use(prefixer)
                                    .set(appCredentials)
                                    .auth(gamerCred.gamer_id, gamerCred.gamer_secret)
                                    .end(function (err, res) {
                                        return null != err ? cb(err) : res.error ? cb(new ClanError(res.status, res.body)) : cb(null, res.body);
                                    });
                            },
                            useCode: function (godfather, reward, cb) {
                                return agent
                                    .post("/v2.6/gamer/godfather/" + domain)
                                    .use(prefixer)
                                    .set(appCredentials)
                                    .send({ godfather: godfather, reward: reward })
                                    .auth(gamerCred.gamer_id, gamerCred.gamer_secret)
                                    .end(function (err, res) {
                                        return null != err ? cb(err) : res.error ? cb(new ClanError(res.status, res.body)) : cb(null, res.body);
                                    });
                            },
                            getGodfather: function (cb) {
                                return agent
                                    .get("/v2.6/gamer/godfather/" + domain)
                                    .use(prefixer)
                                    .set(appCredentials)
                                    .auth(gamerCred.gamer_id, gamerCred.gamer_secret)
                                    .end(function (err, res) {
                                        return null != err ? cb(err) : res.error ? cb(new ClanError(res.status, res.body)) : cb(null, res.body);
                                    });
                            },
                            getGodchildren: function (cb) {
                                return agent
                                    .get("/v2.6/gamer/godchildren/" + domain)
                                    .use(prefixer)
                                    .set(appCredentials)
                                    .auth(gamerCred.gamer_id, gamerCred.gamer_secret)
                                    .end(function (err, res) {
                                        return null != err ? cb(err) : res.error ? cb(new ClanError(res.status, res.body)) : cb(null, res.body);
                                    });
                            },
                        };
                    });
            },
            { "./ClanError.coffee": 5, "./prefixer.coffee": 17, superagent: 1 },
        ],
        21: [
            function (require, module, exports) {
                var ClanError, agent, prefixer;
                (agent = require("superagent")),
                    (prefixer = require("./prefixer.coffee")),
                    (ClanError = require("./ClanError.coffee")),
                    (module.exports = function (appCredentials, gamerCred) {
                        return {
                            listProducts: function (cb) {
                                return agent
                                    .get("/v1/gamer/store/products")
                                    .use(prefixer)
                                    .set(appCredentials)
                                    .auth(gamerCred.gamer_id, gamerCred.gamer_secret)
                                    .end(function (err, res) {
                                        return null != err ? cb(err) : res.error ? cb(new ClanError(res.status, res.body)) : cb(null, res.body);
                                    });
                            },
                        };
                    });
            },
            { "./ClanError.coffee": 5, "./prefixer.coffee": 17, superagent: 1 },
        ],
        22: [
            function (require, module, exports) {
                var ClanError, agent, prefixer;
                (agent = require("superagent")),
                    (prefixer = require("./prefixer.coffee")),
                    (ClanError = require("./ClanError.coffee")),
                    (module.exports = function (appCredentials, gamerCred, domain) {
                        return {
                            balance: function (cb) {
                                return agent
                                    .get("/v1/gamer/tx/" + domain + "/balance")
                                    .use(prefixer)
                                    .set(appCredentials)
                                    .auth(gamerCred.gamer_id, gamerCred.gamer_secret)
                                    .end(function (err, res) {
                                        return null != err ? cb(err) : res.error ? cb(new ClanError(res.status, res.body)) : cb(null, res.body);
                                    });
                            },
                            create: function (tx, desc, cb) {
                                return agent
                                    .post("/v2.2/gamer/tx/" + domain)
                                    .use(prefixer)
                                    .set(appCredentials)
                                    .auth(gamerCred.gamer_id, gamerCred.gamer_secret)
                                    .send({ transaction: tx, description: desc })
                                    .end(function (err, res) {
                                        return null != err ? cb(err) : res.error ? cb(new ClanError(res.status, res.body)) : cb(null, res.body);
                                    });
                            },
                            history: function (unit, skip, limit, cb) {
                                var options;
                                return (
                                    null == unit && (unit = null),
                                    (options = { skip: skip, limit: limit }),
                                    null != unit && (options.unit = unit),
                                    agent
                                        .get("/v2.4/gamer/tx/" + domain)
                                        .use(prefixer)
                                        .query(options)
                                        .set(appCredentials)
                                        .auth(gamerCred.gamer_id, gamerCred.gamer_secret)
                                        .end(function (err, res) {
                                            return null != err ? cb(err) : res.error ? cb(new ClanError(res.status, res.body)) : cb(null, res.body);
                                        })
                                );
                            },
                        };
                    });
            },
            { "./ClanError.coffee": 5, "./prefixer.coffee": 17, superagent: 1 },
        ],
    },
    {},
    [12]
);
